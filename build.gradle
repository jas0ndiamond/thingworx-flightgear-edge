apply plugin: 'java'
apply plugin: 'eclipse'
apply from: 'dependencies.gradle'

//for later LTS
//sourceCompatibility = JavaVersion.VERSION_11
//targetCompatibility = JavaVersion.VERSION_11

//for perc
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    
    //need both of these maven repos for geotools
    maven {
        url "https://maven.geo-solutions.it/"
    }
    maven {
        url "https://repo.osgeo.org/repository/release/"
    }
    
    mavenCentral() 
        
    flatDir {
        dirs 'lib'
    }
}
    
ext {
    projectVersion = "0.4"
    
    flightgearControlJar = "flightgear-control-0.4.jar"
    flightgearControlSourceJar = "lib/flightgear-control-0.4-src.jar"
    
    twxJavaSDKJar = "thingworx-java-sdk-7.1.0a.jar";
    twxJavaSDKSourceJar = "lib/thingworx-java-sdk-7.1.0a-src.jar"
    
    title = "thingworx-flightgear-edge"
}

dependencies {

    implementation libs.edge_sdk_libs
    implementation libs.flightgear_control
    implementation libs.geotools
    
    //edge java sdk 7.1.0a
    //fixes dependency conflict and adds sources jar
    implementation fileTree(dir: project.file("lib/"), include: [twxJavaSDKJar]) 
    
    //flightgear-control 0.2.0
    implementation fileTree(dir: project.file("lib/"), include: [flightgearControlJar])  
}

eclipse {
    //load sources jars for flightgear-control and the twx java sdk
    
    classpath {
        file {
            whenMerged { 
                def lib = entries.find { it.path.contains flightgearControlJar }
                lib.sourcePath = fileReference(file(flightgearControlSourceJar))
                
                lib = entries.find { it.path.contains twxJavaSDKJar }
                lib.sourcePath = fileReference(file(twxJavaSDKSourceJar))
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

jar {
    archiveBaseName = title 
    archiveVersion = projectVersion

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from sourceSets.main.output    
    
    manifest {
        //no main- not directly runnable as we have multiple demo apps
        attributes ([
            "Package-Title": "flightgear-control",
            "Package-Version": projectVersion
        ])
    }
    
    from (configurations.runtimeClasspath.collect { entry -> zipTree(entry) }) {
        //class files from classpath including thirdparty
        //strip meta stuff that causes SecurityExceptions
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        
        //don't need testng resources
        exclude (
            'org/testng**/',
            'testng*'
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'src'
    archiveVersion = projectVersion
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from sourceSets.main.allSource 
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

